const swaggerConfig = {
  path: process.cwd(),
  title: 'API Fournisseur CG - Orchestrateur Logistique',
  version: '3.0.0',
  description:
    'API REST centrale servant de wrapper et orchestrateur pour la plateforme logistique Fournisseur Congo. Int√®gre Appwrite (backend), MailerSend (emails), SMTP (notifications) et Spark Pay (paiements mobiles).',
  tagIndex: 4,
  productionEnv: 'production',
  info: {
    title: 'API Fournisseur CG - Orchestrateur Logistique',
    version: '3.0.0',
    description: `# API Fournisseur CG - Orchestrateur Logistique

L'API Fournisseur CG est la **plateforme centrale** qui orchestre l'√©cosyst√®me logistique du Congo. Elle sert de pont intelligent entre les applications clientes et les services backend, offrant une exp√©rience unifi√©e pour la gestion des fournisseurs, commandes, paiements et livraisons.

## üéØ Mission

Connecter les **fournisseurs locaux** aux **clients internationaux** en simplifiant la logistique, les paiements et la communication dans l'√©cosyst√®me e-commerce congolais.

## üèóÔ∏è Architecture

### **Services Int√©gr√©s**

| Service | R√¥le | Statut |
|---------|------|--------|
| **Appwrite** | Backend principal (DB, Auth, Storage) | ‚úÖ Int√©gr√© |
| **Spaark Pay** | Paiements mobiles (MTN Money, Airtel) | ‚úÖ Int√©gr√© |
| **SMS API** | Notifications et codes OTP | ‚úÖ Int√©gr√© |
| **MailerSend** | Emails marketing | üîÑ En cours |
| **SMTP** | Notifications syst√®me | üîÑ En cours |

### **Collections Principales**

- **üìã QUOTES** - Demandes de devis (FC-QMM-XXXX-YYYY)
- **üìû CONTACTS** - Messages de contact clients
- **üõçÔ∏è PRODUCTS** - Catalogue multi-plateformes
- **üì¶ ORDERS** - Commandes (FC-ORD-XXXX-YYYY)
- **üí≥ PAYMENTS** - Transactions de paiement

## üöÄ Fonctionnalit√©s Cl√©s

### **Paiements Mobiles Intelligents**
- Support natif **MTN Money** et **Airtel Money**
- V√©rification automatique des transactions
- Gestion des webhooks en temps r√©el
- Retry automatique pour les erreurs temporaires

### **Gestion SMS Avanc√©e**
- Envoi de codes OTP s√©curis√©s
- Notifications personnalis√©es
- Calcul automatique des co√ªts
- Historique et statistiques d√©taill√©es

### **Collections Auto-Configur√©es**
- D√©finition d√©clarative des structures
- Cr√©ation automatique d'attributs et d'index
- Permissions granulaires par collection
- Migration et mise √† jour automatiques

## üîê Authentification

L'API supporte **3 m√©thodes d'authentification** :

1. **Bearer Token** - JWT pour les utilisateurs connect√©s
2. **API Key** - Pour l'authentification service-√†-service
3. **Basic Auth** - Pour les endpoints administrateur

<details>
  <summary>Exemples d'utilisation</summary>

  **Authentification Bearer**
  \`\`\`bash
  curl -H "Authorization: Bearer YOUR_JWT_TOKEN" \\
       https://api.fournisseur.cg/v3/auth/profile
  \`\`\`

  **Authentification API Key**
  \`\`\`bash
  curl -H "X-API-Key: YOUR_API_KEY" \\
       https://api.fournisseur.cg/v3/appwrite/health
  \`\`\`

  **Paiement Mobile**
  \`\`\`bash
  curl -X POST https://api.fournisseur.cg/v3/spaark-pay/initiate \\
       -H "Authorization: Bearer YOUR_JWT_TOKEN" \\
       -H "Content-Type: application/json" \\
       -d '{"phone":"053518256","amount":150,"mode":"airtel"}'
  \`\`\`
</details>

## üåç Sp√©cificit√©s Congo

### **Validation Locale**
- Num√©ros de t√©l√©phone congolais (0XXXXXXXX)
- Devise XAF (Franc CFA)
- Adresses et codes postaux locaux
- Gestion g√©ographique sp√©cifique

### **Paiements Locaux**
- **Airtel Money** : 04/05XXXXXXXX
- **MTN Mobile Money** : 06XXXXXXXX
- Int√©gration native avec les op√©rateurs locaux

## üìä Monitoring et Logs

### **Health Checks**
- \`/v3\` - √âtat g√©n√©ral de l'API
- \`/v3/spaark-pay/health\` - Connexion Spaark Pay
- \`/v3/sms/health\` - Connexion SMS API
- \`/v3/appwrite/health\` - Connexion Appwrite

### **Logs D√©taill√©s**
- Logs structur√©s pour chaque service
- Suivi des tentatives de retry
- M√©triques de performance
- Alertes automatiques

## üîó Ressources

* [Documentation compl√®te](https://fournisseur.cg/docs)
* [Interface d'administration](https://admin.fournisseur.cg)
* [Support technique](mailto:support@fournisseur.cg)
* [Statut des services](https://status.fournisseur.cg)

## üìù Support Markdown

Cette documentation supporte le **Markdown complet** :

> [!tip]
> **Conseil** : Utilisez les endpoints de test pour v√©rifier la connectivit√© avant les appels de production.

> [!warning]
> **Attention** : Les paiements mobiles peuvent avoir des d√©lais de traitement variables selon l'op√©rateur.

| Fonctionnalit√© | Disponibilit√© | Documentation |
|----------------|---------------|---------------|
| Paiements mobiles | ‚úÖ Production | [Guide complet](#tag/Payment-Processing) |
| SMS notifications | ‚úÖ Production | [API SMS](#tag/SMS-Notifications) |
| Gestion collections | ‚úÖ Production | [Appwrite](#tag/Database-Management) |
| Authentification | ‚úÖ Production | [Auth](#tag/Authentication) |

<details>
  <summary>Exemples de r√©ponses</summary>

  **Paiement r√©ussi**
  \`\`\`json
  {
    "success": true,
    "data": {
      "paymentId": 28,
      "token": "28257ddbaf7a11ef86feac1f6be4442c",
      "composition": "*128*128*1159*PIN#",
      "transID": "JKUCJDFLIKDGDGD-328"
    }
  }
  \`\`\`

  **SMS envoy√©**
  \`\`\`json
  {
    "success": true,
    "data": {
      "messageId": "msg_123",
      "status": "sent",
      "to": "053518256",
      "cost": 25
    }
  }
  \`\`\`
</details>`,
    contact: {
      name: '√âquipe Technique Fournisseur CG',
      email: 'dev@fournisseur.cg',
      url: 'https://fournisseur.cg',
    },
    license: {
      name: 'Propri√©taire - Fournisseur CG',
      url: 'https://fournisseur.cg/license',
    },
    termsOfService: 'https://fournisseur.cg/terms',
  },
  snakeCase: true,
  debug: true,
  ignore: [
    '/swagger',
    '/docs',
    '/',
    '/swagger/yaml-only',
    '/swagger/scalar-config',
    '/swagger/metadata',
  ],
  preferredPutPatch: 'PUT',
  // Configuration pour am√©liorer la g√©n√©ration automatique
  writeFileSync: false, // Ne pas essayer d'√©crire un fichier swagger.yml
  mode: process.env.NODE_ENV === 'production' ? 'PRODUCTION' : 'RUNTIME',
  tags: [
    {
      name: 'Authentication',
      description: 'Authentification utilisateurs et gestion des tokens JWT',
    },
    {
      name: 'Database Management',
      description: 'Wrapper pour les op√©rations Appwrite (collections, documents, utilisateurs)',
    },
    {
      name: 'Collection Management',
      description: 'Gestion des collections et initialisation des structures de donn√©es',
    },
    {
      name: 'Payment Processing',
      description: 'Int√©gration Spaark Pay - Paiements mobiles (MTN Money, Airtel Money)',
    },
    {
      name: 'SMS Notifications',
      description: 'Envoi de SMS et notifications via API SMS',
    },
    {
      name: 'Email Services',
      description: 'MailerSend (marketing) et SMTP (notifications syst√®me)',
    },
    {
      name: 'User Management',
      description: 'Gestion des utilisateurs (visiteurs, clients, professionnels, admins)',
    },
    {
      name: 'Webhooks',
      description: 'Endpoints pour webhooks entrants (Spark Pay, partenaires transport)',
    },
    {
      name: 'Analytics',
      description: 'M√©triques, rapports et donn√©es analytiques de la plateforme',
    },
  ],
  // Configuration des serveurs au niveau racine (comme Scalar Galaxy)
  servers: [
    {
      url: 'https://api.fournisseur.cg',
      description: 'Production - API officielle',
    },
    {
      url: 'https://staging-api.fournisseur.cg',
      description: 'Staging - Tests et validation',
    },
    {
      url: 'http://localhost:3333',
      description: 'D√©veloppement local',
    },
  ],
  // Configuration de s√©curit√© simplifi√©e (comme Scalar Galaxy)
  security: [{ bearerAuth: [] }, { apiKeyAuth: [] }, { basicAuth: [] }],
  common: {
    parameters: {
      sortable: [
        {
          in: 'query',
          name: 'sortBy',
          schema: { type: 'string', example: 'createdAt' },
          description: 'Field to sort by',
        },
        {
          in: 'query',
          name: 'sortType',
          schema: { type: 'string', enum: ['ASC', 'DESC'], example: 'DESC' },
          description: 'Sort direction',
        },
      ],
      pagination: [
        {
          in: 'query',
          name: 'page',
          schema: { type: 'integer', minimum: 1, example: 1 },
          description: 'Page number',
        },
        {
          in: 'query',
          name: 'limit',
          schema: { type: 'integer', minimum: 1, maximum: 100, example: 20 },
          description: 'Items per page',
        },
      ],
    },
    headers: {
      paginated: {
        'X-Total-Pages': {
          description: 'Total amount of pages',
          schema: { type: 'integer', example: 5 },
        },
        'X-Total': {
          description: 'Total amount of results',
          schema: { type: 'integer', example: 100 },
        },
        'X-Per-Page': {
          description: 'Results per page',
          schema: { type: 'integer', example: 20 },
        },
        'X-Current-Page': {
          description: 'Current page number',
          schema: { type: 'integer', example: 1 },
        },
      },
      security: {
        'X-Request-ID': {
          description: 'Unique request identifier for tracking',
          schema: { type: 'string', example: 'req_123456789' },
        },
        'X-API-Version': {
          description: 'API version being used',
          schema: { type: 'string', example: 'v3' },
        },
      },
    },
  },
  securitySchemes: {
    bearerAuth: {
      type: 'http',
      scheme: 'bearer',
      bearerFormat: 'JWT',
      description: 'JWT token obtenu depuis /v3/auth/login',
    },
    apiKeyAuth: {
      type: 'apiKey',
      in: 'header',
      name: 'X-API-Key',
      description: "Cl√© API pour l'authentification service-√†-service",
    },
    basicAuth: {
      type: 'http',
      scheme: 'basic',
      description: 'Authentification basique pour les endpoints admin',
    },
  },
  authMiddlewares: ['auth', 'auth:api'],
  defaultSecurityScheme: 'bearerAuth',
  persistAuthorization: true,
  showFullPath: true,
}

// Ajouter la m√©thode get pour compatibilit√© avec adonis-autoswagger
Object.defineProperty(swaggerConfig, 'get', {
  value: function (key: string) {
    return (this as any)[key]
  },
  enumerable: false,
  writable: false,
})

export default swaggerConfig
