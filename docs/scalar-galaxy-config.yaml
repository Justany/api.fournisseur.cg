# Configuration Scalar Galaxy pour API Fournisseur CG
# Généré automatiquement le 2025-08-03T09:43:49.549Z
# Combine AutoSwagger (routes) + Configuration Scalar (UI/UX)

openapi: 3.0.0
info:
  title: API Fournisseur CG - Orchestrateur Logistique
  version: 3.0.0
  description: >-
    API REST centrale servant de wrapper pour l'écosystème Fournisseur Congo. Orchestrateur entre applications clientes
    (web Vue.js, mobile) et services backend (Appwrite, MailerSend, SMTP, Spark Pay).
  contact:
    name: Équipe Technique Fournisseur CG
    email: dev@fournisseur.cg
    url: https://fournisseur.cg
  license:
    name: Propriétaire - Fournisseur CG
    url: https://fournisseur.cg/license
  termsOfService: https://fournisseur.cg/terms
servers:
  - url: https://api.fournisseur.cg
    description: Production - API officielle
  - url: https://staging.api.fournisseur.cg
    description: Staging - Tests et validation
  - url: http://localhost:3333
    description: Développement local
security:
  - bearerAuth: []
  - apiKeyAuth: []
  - basicAuth: []
components:
  schemas: {}
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtenu depuis /v3/auth/login
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: Clé API pour l'authentification service-à-service
    basicAuth:
      type: http
      scheme: basic
      description: Authentification basique pour les endpoints admin
tags:
  - name: Authentication
    description: Authentification utilisateurs et gestion des tokens JWT
  - name: Database Management
    description: Wrapper pour les opérations Appwrite (collections, documents, utilisateurs)
  - name: Collection Management
    description: Gestion des collections et initialisation des structures de données
  - name: Payment Processing
    description: Intégration Spaark Pay - Paiements mobiles (MTN Money, Airtel Money)
  - name: SMS Notifications
    description: Envoi de SMS et notifications via API SMS
  - name: Email Services
    description: MailerSend (marketing) et SMTP (notifications système)
  - name: User Management
    description: Gestion des utilisateurs (visiteurs, clients, professionnels, admins)
  - name: Webhooks
    description: Endpoints pour webhooks entrants (Spark Pay, partenaires transport)
  - name: Analytics
    description: Métriques, rapports et données analytiques de la plateforme
paths:
  /v3:
    get:
      summary: route
      description: |2-


         __ - ****
      parameters: []
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json: {}
      security: []
  /v3/auth/register:
    post:
      summary: Register new user (register)
      description: |-
        Returns **201** (Created) as **text/plain**

         _app/controllers/auth_controller.ts_ - **register**
      parameters: []
      tags:
        - AUTH
      responses:
        '201':
          content:
            text/plain:
              example: '{"success": true, "message": "Compte créé avec succès", "data": {"user": {...}, "token": "..."}}'
          description: Returns **201** (Created) as **text/plain**
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: Données invalides
              example:
                error: Données invalides
          description: Returns **400** (Bad Request) as **application/json**
        '409':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: Email déjà utilisé
              example:
                error: Email déjà utilisé
          description: Returns **409** (Conflict) as **application/json**
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName: John Doe
                email: test@example.com
                password: password123
            example:
              fullName: John Doe
              email: test@example.com
              password: password123
  /v3/auth/login:
    post:
      summary: User login (login)
      description: |-
        Authenticate user and generate token

         _app/controllers/auth_controller.ts_ - **login**
      parameters: []
      tags:
        - AUTH
      responses:
        '200':
          content:
            text/plain:
              example: '{"success": true, "message": "Connexion réussie", "data": {"user": {...}, "token": "..."}}'
          description: Returns **200** (OK) as **text/plain**
        '401':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: Identifiants invalides
              example:
                error: Identifiants invalides
          description: Returns **401** (Unauthorized) as **application/json**
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email: test@example.com
                password: password123
            example:
              email: test@example.com
              password: password123
  /v3/auth/get-token:
    post:
      summary: Get clear token (for testing) (getToken)
      description: |-
        Temporary route to get complete token

         _app/controllers/auth_controller.ts_ - **getToken**
      parameters: []
      tags:
        - AUTH
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: Bearer ...
              example:
                token: Bearer ...
          description: Returns **200** (OK) as **application/json**
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email: test@example.com
                password: password123
            example:
              email: test@example.com
              password: password123
  /v3/appwrite/health:
    get:
      summary: Appwrite connection health check (health)
      description: |-
        Returns **200** (OK) as **application/json**

         _app/controllers/appwrites_controller.ts_ - **health**
      parameters: []
      tags:
        - APPWRITE
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: healthy
                  databases: 2
                  timestamp: '2024-01-01T00:00:00.000Z'
              example:
                status: healthy
                databases: 2
                timestamp: '2024-01-01T00:00:00.000Z'
          description: Returns **200** (OK) as **application/json**
        '500':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: Erreur lors du health check Appwrite
                  details: Connection failed
              example:
                error: Erreur lors du health check Appwrite
                details: Connection failed
          description: Returns **500** (Internal Server Error) as **application/json**
      security: []
  /v3/appwrite/databases:
    get:
      summary: List all Appwrite databases (listDatabases)
      description: |-
        Returns **200** (OK) as **application/json**

         _app/controllers/appwrites_controller.ts_ - **listDatabases**
      parameters: []
      tags:
        - APPWRITE
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: true
                  data:
                    type: object
                    properties:
                      total: 2
                      databases:
                        type: object
                        properties: {}
              example:
                success: true
                data:
                  total: 2
                  databases: []
          description: Returns **200** (OK) as **application/json**
        '500':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: Erreur lors de la récupération des bases de données
                  details: string
              example:
                error: Erreur lors de la récupération des bases de données
                details: string
          description: Returns **500** (Internal Server Error) as **application/json**
      security: []
  /v3/appwrite/databases/{databaseId}/collections:
    get:
      summary: List database collections (listCollections)
      description: |-
        Returns **200** (OK) as **application/json**

         _app/controllers/appwrites_controller.ts_ - **listCollections**
      parameters:
        - in: path
          name: databaseId
          description: ID de la base de données
          schema:
            example: ''
            type: string
          required: true
      tags:
        - APPWRITE
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: true
                  data:
                    type: object
                    properties:
                      total: 5
                      collections:
                        type: object
                        properties: {}
              example:
                success: true
                data:
                  total: 5
                  collections: []
          description: Returns **200** (OK) as **application/json**
        '500':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: Erreur lors de la récupération des collections
                  details: string
              example:
                error: Erreur lors de la récupération des collections
                details: string
          description: Returns **500** (Internal Server Error) as **application/json**
      security: []
  /v3/spaark-pay/health:
    get:
      summary: Spaark Pay connection health check (health)
      description: |-
        Returns **200** (OK) as **application/json**

         _app/controllers/spaark_pays_controller.ts_ - **health**
      parameters: []
      tags:
        - PAYMENTS
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: healthy
                  message: Connexion à Spaark Pay API établie
              example:
                status: healthy
                message: Connexion à Spaark Pay API établie
          description: Returns **200** (OK) as **application/json**
        '500':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: unhealthy
                  message: Erreur de connexion
              example:
                status: unhealthy
                message: Erreur de connexion
          description: Returns **500** (Internal Server Error) as **application/json**
      security: []
  /v3/spaark-pay/test:
    get:
      summary: Test integration (test)
      description: |-
        Returns **200** (OK) as **text/plain**

         _app/controllers/spaark_pays_controller.ts_ - **test**
      parameters: []
      tags:
        - PAYMENTS
      responses:
        '200':
          content:
            text/plain:
              example: '{"status": "ok", "message": "Intégration Spaark Pay fonctionnelle", "config": {...}}'
          description: Returns **200** (OK) as **text/plain**
      security: []
  /v3/sms/health:
    get:
      summary: SMS connection health check (health)
      description: |-
        Returns **200** (OK) as **application/json**

         _app/controllers/sms_controller.ts_ - **health**
      parameters: []
      tags:
        - SMS
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: healthy
                  message: Connexion à SMS API établie
              example:
                status: healthy
                message: Connexion à SMS API établie
          description: Returns **200** (OK) as **application/json**
        '500':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: unhealthy
                  message: Erreur de connexion
              example:
                status: unhealthy
                message: Erreur de connexion
          description: Returns **500** (Internal Server Error) as **application/json**
      security: []
  /v3/sms/test:
    get:
      summary: Test SMS integration (test)
      description: |-
        Returns **200** (OK) as **text/plain**

         _app/controllers/sms_controller.ts_ - **test**
      parameters: []
      tags:
        - SMS
      responses:
        '200':
          content:
            text/plain:
              example: '{"status": "ok", "message": "Intégration SMS fonctionnelle", "config": {...}}'
          description: Returns **200** (OK) as **text/plain**
      security: []
x-scalar:
  ui:
    theme:
      primaryColor: '#2563eb'
      secondaryColor: '#64748b'
      backgroundColor: '#ffffff'
      textColor: '#1f2937'
    navigation:
      showServers: true
      showSecurity: true
      showExamples: true
      showResponses: true
    examples:
      showRequestExamples: true
      showResponseExamples: true
      defaultLanguage: curl
    documentation:
      showDescription: true
      showContact: true
      showLicense: true
      showTermsOfService: true
  features:
    auth:
      enabled: true
      persistAuthorization: true
      showSecuritySchemes: true
    testing:
      enabled: true
      allowCustomHeaders: true
      allowCustomBody: true
    docs:
      enabled: true
      showCodeSamples: true
      showSchemaExamples: true
    analytics:
      enabled: true
      trackUsage: true
      trackErrors: true
  webhooks:
    enabled: true
    allowCustomWebhooks: true
    defaultTimeout: 30000
  codeSamples:
    languages:
      - curl
      - javascript
      - python
      - php
      - java
      - csharp
    defaultLanguage: curl
    showLineNumbers: true
    showCopyButton: true
  responses:
    showSchema: true
    showExamples: true
    showHeaders: true
    showStatusCodes: true
  search:
    enabled: true
    searchInDescriptions: true
    searchInExamples: true
    searchInSchemas: true
  metadata:
    showVersion: true
    showLastModified: true
    showGeneratedBy: true
    generatedBy: API Fournisseur CG - AutoSwagger + Scalar
    generatedAt: '2025-08-03T09:43:49.545Z'
