#!/bin/bash

# ===========================================
# SCRIPT DE D√âPLOIEMENT - API FOURNISSEUR CG
# ===========================================
# Usage: ./deploy.sh [production|staging]

set -e

# Couleurs pour le terminal
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
ENVIRONMENT=${1:-staging}
PROJECT_ROOT=$(pwd)
DEPLOY_DIR="/var/www/adonisjs-apps/api-fournisseur"

# Configuration par environnement
if [ "$ENVIRONMENT" = "production" ]; then
    PORT=3333
    DOMAIN="api.fournisseur.cg"
    PM2_NAME="api-fournisseur-prod"
    ENV_FILE="env.production.example"
    echo -e "${GREEN}üöÄ D√©ploiement en PRODUCTION${NC}"
elif [ "$ENVIRONMENT" = "staging" ]; then
    PORT=3334
    DOMAIN="staging-api.fournisseur.cg"
    PM2_NAME="api-fournisseur-staging"
    ENV_FILE="env.staging.example"
    echo -e "${YELLOW}üß™ D√©ploiement en STAGING${NC}"
else
    echo -e "${RED}‚ùå Environnement invalide. Utilisez: production ou staging${NC}"
    exit 1
fi

echo "=================================="
echo "üì¶ Environnement: $ENVIRONMENT"
echo "üåê Port: $PORT"
echo "üîó Domaine: $DOMAIN"
echo "‚öôÔ∏è  PM2 Name: $PM2_NAME"
echo "=================================="

# Fonction pour afficher les √©tapes
print_step() {
    echo -e "\n${BLUE}üìã $1${NC}"
}

# Fonction pour v√©rifier le succ√®s
check_success() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
    else
        echo -e "${RED}‚ùå $1${NC}"
        exit 1
    fi
}

# √âtape 1: V√©rifications pr√©liminaires
print_step "V√©rifications pr√©liminaires"

if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Fichier package.json non trouv√©. √ätes-vous dans le bon r√©pertoire ?${NC}"
    exit 1
fi

if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}‚ùå Fichier $ENV_FILE non trouv√©.${NC}"
    exit 1
fi

check_success "V√©rifications pr√©liminaires termin√©es"

# √âtape 2: Installation des d√©pendances
print_step "Installation des d√©pendances"
pnpm install --frozen-lockfile
check_success "D√©pendances install√©es"

# √âtape 3: Build de l'application
print_step "Build de l'application"
pnpm run build
check_success "Build termin√©"

# √âtape 4: Cr√©ation du r√©pertoire de d√©ploiement
print_step "Pr√©paration du r√©pertoire de d√©ploiement"
sudo mkdir -p "$DEPLOY_DIR"
sudo chown -R $USER:$USER "$DEPLOY_DIR"
check_success "R√©pertoire de d√©ploiement pr√©par√©"

# √âtape 5: Copie des fichiers
print_step "Copie des fichiers de build"
cp -r build/* "$DEPLOY_DIR/"
cp package.json "$DEPLOY_DIR/"
cp pnpm-lock.yaml "$DEPLOY_DIR/"
check_success "Fichiers copi√©s"

# √âtape 6: Copie de la configuration d'environnement
print_step "Configuration de l'environnement $ENVIRONMENT"
cp "$ENV_FILE" "$DEPLOY_DIR/.env"
check_success "Configuration d'environnement copi√©e"

# √âtape 7: Installation des d√©pendances de production
print_step "Installation des d√©pendances de production"
cd "$DEPLOY_DIR"
pnpm install --frozen-lockfile --prod
check_success "D√©pendances de production install√©es"

# √âtape 8: Configuration PM2
print_step "Configuration PM2"
cat > "$DEPLOY_DIR/ecosystem.config.js" << EOF
module.exports = {
  apps: [
    {
      name: '$PM2_NAME',
      script: './bin/server.js',
      instances: 'max',
      exec_mode: 'cluster',
      autorestart: true,
      watch: false,
      max_memory_restart: '1G',
      env: {
        NODE_ENV: '$ENVIRONMENT',
        PORT: $PORT,
        HOST: '0.0.0.0'
      },
      error_file: '/var/log/pm2/$PM2_NAME-error.log',
      out_file: '/var/log/pm2/$PM2_NAME-out.log',
      log_file: '/var/log/pm2/$PM2_NAME-combined.log',
      time: true
    }
  ]
}
EOF

check_success "Configuration PM2 cr√©√©e"

# √âtape 9: Red√©marrage de l'application avec PM2
print_step "Red√©marrage de l'application"

# Arr√™ter l'ancienne version si elle existe
pm2 stop "$PM2_NAME" 2>/dev/null || true
pm2 delete "$PM2_NAME" 2>/dev/null || true

# D√©marrer la nouvelle version
pm2 start ecosystem.config.js
pm2 save
check_success "Application red√©marr√©e avec PM2"

# √âtape 10: V√©rification du statut
print_step "V√©rification du statut"
sleep 5
pm2 status "$PM2_NAME"

# Test de connectivit√© local
echo -e "\n${BLUE}üîç Test de connectivit√©...${NC}"
if curl -f -s "http://localhost:$PORT" > /dev/null; then
    echo -e "${GREEN}‚úÖ Application accessible sur le port $PORT${NC}"
else
    echo -e "${RED}‚ùå Application non accessible sur le port $PORT${NC}"
    echo -e "${YELLOW}üìã V√©rifiez les logs: pm2 logs $PM2_NAME${NC}"
fi

# √âtape 11: Affichage des informations de d√©ploiement
print_step "Informations de d√©ploiement"
echo "=================================="
echo -e "${GREEN}üéâ D√©ploiement termin√© avec succ√®s !${NC}"
echo ""
echo "üìã Informations:"
echo "   ‚Ä¢ Environnement: $ENVIRONMENT"
echo "   ‚Ä¢ Port local: $PORT"
echo "   ‚Ä¢ PM2 Name: $PM2_NAME"
echo "   ‚Ä¢ R√©pertoire: $DEPLOY_DIR"
echo ""
echo "üîó URLs:"
echo "   ‚Ä¢ Local: http://localhost:$PORT"
echo "   ‚Ä¢ Public: https://$DOMAIN"
echo "   ‚Ä¢ Documentation: https://$DOMAIN/docs"
echo "   ‚Ä¢ Health: https://$DOMAIN/v3"
echo ""
echo "‚öôÔ∏è  Commandes utiles:"
echo "   ‚Ä¢ Logs: pm2 logs $PM2_NAME"
echo "   ‚Ä¢ Status: pm2 status $PM2_NAME"
echo "   ‚Ä¢ Restart: pm2 restart $PM2_NAME"
echo "   ‚Ä¢ Stop: pm2 stop $PM2_NAME"
echo ""
echo "üìÅ Prochaines √©tapes:"
echo "   1. V√©rifiez que Nginx pointe vers le port $PORT"
echo "   2. V√©rifiez que Traefik route vers $DOMAIN"
echo "   3. Testez l'API via $DOMAIN"
echo "=================================="

cd "$PROJECT_ROOT"
